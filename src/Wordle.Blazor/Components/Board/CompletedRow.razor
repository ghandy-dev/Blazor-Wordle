@using Wordle.Blazor.Constants
@using Wordle.Blazor.Enums

@namespace Wordle.Blazor.Components

<Row>
    @for (int i = 0; i < GameRulesConstants.WordLength; i++)
    {
        <Tile @key=@i
            RevealAnimationDelay=@RevealDelays[RevealSpeed][i] 
            Letter="@Guess.GuessedWord[i].ToString()"
            State="@Guess.LetterStates[i]" 
            Reveal=true 
            Bounce=_correct
            BounceAnimationDelay=@(TimerConstants.TileTotalRevealDuration + @BounceDelays[i]) />
    }
</Row>

@code {
    [Parameter] public required GuessModel Guess { get; set; }

    [Parameter] public RevealSpeed RevealSpeed { get; set; } = RevealSpeed.Standard;

    [Parameter] public bool BounceOnCorrectGuess { get; set; }

    private bool _correct;

    protected override void OnInitialized()
    {
        if (BounceOnCorrectGuess)
        {
            _correct = Guess.LetterStates.All(state => state == LetterState.Correct);
        }
    }

    private static Dictionary<int, double> BounceDelays = new()
    {
        { 0, 1 },
        { 1, 100 },
        { 2, 200 },
        { 3, 300 },
        { 4, 400 },
        { 5, 500 },
    };

    private static Dictionary<RevealSpeed, Dictionary<int, double>> RevealDelays = new()
    {
        {
            RevealSpeed.Instant,
            new()
            {
                { 0, 1 },
                { 1, 1 },
                { 2, 1 },
                { 3, 1 },
                { 4, 1 },
                { 5, 1 },
            }
        },
        {
            RevealSpeed.Fast,
            new()
            {
                { 0, 1 },
                { 1, 100 },
                { 2, 200 },
                { 3, 300 },
                { 4, 400 },
                { 5, 500 },
            }
        },
        {
            RevealSpeed.Standard,
            new()
            {
                { 0, 1 },
                { 1, 250 },
                { 2, 500 },
                { 3, 750 },
                { 4, 1000 },
                { 5, 1250 },
            }
        },
    };
}